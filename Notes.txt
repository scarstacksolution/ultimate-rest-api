* HttpResponseException:

            if (manager == null)
            {
                // Style A
                _logger.LogInformation("No information found for {Managers}", DateTime.UtcNow.Date);
                throw new HttpResponseException(HttpStatusCode.NotFound);

                // Style B
                //var notFoundResponse = new HttpResponseMessage(HttpStatusCode.NotFound);
                //throw new HttpResponseException(notFoundResponse.StatusCode);

                //Style C
                /*var resp = new HttpResponseMessage(HttpStatusCode.NotFound)
                {
                    Content = new StringContent(string.Format("No Manager with ID = {0}", id)),
                    ReasonPhrase = "Manager ID Not Found"
                };
                throw new HttpResponseException(resp.StatusCode);*/
            }


* Add XML Formatting as Accept Header In Client Call to API:

//var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers()
    .AddXmlSerializerFormatters();



* Context.SaveChanges();

- https://learn.microsoft.com/en-us/aspnet/core/data/ef-mvc/crud?view=aspnetcore-7.0
- https://learn.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/updating-related-data-with-the-entity-framework-in-an-asp-net-mvc-application


===========================================================================================================================================================================


==> JWT Implementation: https://www.c-sharpcorner.com/article/jwt-token-creation-authentication-and-authorization-in-asp-net-core-6-0-with-po/

* appsettings.json:

(A)
 "Jwt": {
    "Key": "AMDz2R78kP5jkoTK6FX5g789LRyn52”",
    "Issuer": "https://localhost:7116",
    "Audience": "https://localhost:7116"
  },


* Program.cs file:

(B)
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options => {
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]!))
    };
});


(B)
app.UseAuthentication();
app.UseAuthorization();


* Nugget Package:
- JWT
- Microsoft.AspNetCore.Authentication.JwtBearer
- Microsoft.IdentityModel.Tokens
- System.IdentityModel.Tokens.Jwt


* Assembly Components for Program.cs Class :
- using Microsoft.AspNetCore.Authentication.JwtBearer;
- using Microsoft.IdentityModel.Tokens;
- using System.Text;


===========================================================================================================================================================================


*	GitHub Desktop https://desktop.github.com


===========================================================================================================================================================================


*   Server-side Caching:

https://learn.microsoft.com/en-us/aspnet/core/performance/caching/overview?view=aspnetcore-7.0

https://code-maze.com/aspnetcore-in-memory-caching/


   // Program.cs:

   builder.Services.AddMemoryCache();


   // Example.cs:

   private const string managerListCacheKey = "managerList";

   try
        {
            _logger.LogInformation("Processing request for GetAllManagers at: {DT}", DateTime.Now.ToLongTimeString());

            var managers = new List<Managers>();
            if (TryGetCachedData(managerListCacheKey, managers))
            {
                _logger.LogInformation("GetAllManagers found in cache at: {DT}", DateTime.Now.ToLongTimeString());
            }

            if (_memoryCache.TryGetValue(managerListCacheKey, out IEnumerable<Managers> managers))
            {
                _logger.LogInformation("GetAllManagers found in cache at: {DT}", DateTime.Now.ToLongTimeString());
            }

            else
            {

                _logger.LogInformation("GetAllManagers not found in cache at: {DT}", DateTime.Now.ToLongTimeString());

                // Key not in cache, so get data
                managers = _readRepository.GetAllManagers();
                if (managers!.Count() == 0)
                {
                    _logger.LogWarning("No detail found for GetAllManagers Uri at: {DT}", DateTime.Now.ToLongTimeString());
                    throw new HttpResponseException(HttpStatusCode.NotFound);
                }

                // Save the data to iMemory cache
                var cachedData = new MemoryCacheEntryOptions()
                    .SetSlidingExpiration(TimeSpan.FromMinutes(60))
                    .SetAbsoluteExpiration(TimeSpan.FromMinutes(60))
                    .SetPriority(CacheItemPriority.Normal)
                    .SetSize(10000);

                // Save the data in Memory Cache
                _memoryCache.Set(managerListCacheKey, managers, cachedData);
            }

            _logger.LogInformation("Returning results found for GetAllManagers Uri at: {DT}", DateTime.Now.ToLongTimeString());

            return managers!;
        }


===========================================================================================================================================================================


* NUnit - Unit Testing:

https://learn.microsoft.com/en-us/aspnet/core/mvc/controllers/testing?view=aspnetcore-7.0
https://www.youtube.com/watch?v=Hmp2ctGacIo
https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices

// Nuget Packages for the Test Solution

- NUnit
- NUnit3TestAdapter
- Microsoft.NET.Test.Sdk
- Microsoft.AspNetCore.MVC.Testing
- Moq
- Moq.EntityFrameworkCore
- Moq.Contrib.HttpClient


// Program.cs file

- Add following code at end of Program.cs file:-  public partial class Program { }


// Samples:
Assert.That(_departments.Any(d => d.Dept_id == 1));
Assert.That(_departments.Any(d => d.Dept_name == "Paralegal"));


===========================================================================================================================================================================


   + //Multiple Row List Collection

   var departments = new List<Departments>
        {
        { new Departments() { Dept_id = 1, Dept_name = "Paralegal"}},
        { new Departments() { Dept_id = 2, Dept_name = "Business"}},
        { new Departments() { Dept_id = 3, Dept_name = "Public Relations"}},
        { new Departments() { Dept_id = 4, Dept_name = "Customer Support"}}
        };


   + //Single Row List Collection

   var _deptData = new Departments() { Dept_id = 1, Dept_name = "Paralegal" };



===========================================================================================================================================================================
