===========================================================================================================================================================================


* HttpResponseException:

            if (manager == null)
            {
                // Style A
                _logger.LogInformation("No information found for {Managers}", DateTime.UtcNow.Date);
                throw new HttpResponseException(HttpStatusCode.NotFound);

                // Style B
                //var notFoundResponse = new HttpResponseMessage(HttpStatusCode.NotFound);
                //throw new HttpResponseException(notFoundResponse.StatusCode);

                //Style C
                /*var resp = new HttpResponseMessage(HttpStatusCode.NotFound)
                {
                    Content = new StringContent(string.Format("No Manager with ID = {0}", id)),
                    ReasonPhrase = "Manager ID Not Found"
                };
                throw new HttpResponseException(resp.StatusCode);*/
            }


* Add XML Formatting as Accept Header In Client Call to API:

//var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers()
    .AddXmlSerializerFormatters();


===========================================================================================================================================================================


==> JWT Implementation: https://www.c-sharpcorner.com/article/jwt-token-creation-authentication-and-authorization-in-asp-net-core-6-0-with-po/

* appsettings.json:

(A)
 "Jwt": {
    "Key": "AMDz2R78kP5jkoTK6FX5g789LRyn52”",
    "Issuer": "https://localhost:7116",
    "Audience": "https://localhost:7116"
  },


* Program.cs file:

(B)
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options => {
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]!))
    };
});


(B)
app.UseAuthentication();
app.UseAuthorization();


* Nugget Package:
- JWT
- Microsoft.AspNetCore.Authentication.JwtBearer
- Microsoft.IdentityModel.Tokens
- System.IdentityModel.Tokens.Jwt


* Assembly Components for Program.cs Class :
- using Microsoft.AspNetCore.Authentication.JwtBearer;
- using Microsoft.IdentityModel.Tokens;
- using System.Text;


===========================================================================================================================================================================


*   Server-side Caching:

https://learn.microsoft.com/en-us/aspnet/core/performance/caching/overview?view=aspnetcore-7.0

https://code-maze.com/aspnetcore-in-memory-caching/


   // Program.cs:

   builder.Services.AddMemoryCache();


   // Example.cs:

   private const string managerListCacheKey = "managerList";

   try
        {
            _logger.LogInformation("Processing request for GetAllManagers at: {DT}", DateTime.Now.ToLongTimeString());

            var managers = new List<Managers>();
            if (TryGetCachedData(managerListCacheKey, managers))
            {
                _logger.LogInformation("GetAllManagers found in cache at: {DT}", DateTime.Now.ToLongTimeString());
            }

            if (_memoryCache.TryGetValue(managerListCacheKey, out IEnumerable<Managers> managers))
            {
                _logger.LogInformation("GetAllManagers found in cache at: {DT}", DateTime.Now.ToLongTimeString());
            }

            else
            {

                _logger.LogInformation("GetAllManagers not found in cache at: {DT}", DateTime.Now.ToLongTimeString());

                // Key not in cache, so get data
                managers = _readRepository.GetAllManagers();
                if (managers!.Count() == 0)
                {
                    _logger.LogWarning("No detail found for GetAllManagers Uri at: {DT}", DateTime.Now.ToLongTimeString());
                    throw new HttpResponseException(HttpStatusCode.NotFound);
                }

                // Save the data to iMemory cache
                var cachedData = new MemoryCacheEntryOptions()
                    .SetSlidingExpiration(TimeSpan.FromMinutes(60))
                    .SetAbsoluteExpiration(TimeSpan.FromMinutes(60))
                    .SetPriority(CacheItemPriority.Normal)
                    .SetSize(10000);

                // Save the data in Memory Cache
                _memoryCache.Set(managerListCacheKey, managers, cachedData);
            }

            _logger.LogInformation("Returning results found for GetAllManagers Uri at: {DT}", DateTime.Now.ToLongTimeString());

            return managers!;
        }


===========================================================================================================================================================================


* NUnit - Unit Testing:

// References for read-up

https://learn.microsoft.com/en-us/aspnet/core/mvc/controllers/testing?view=aspnetcore-7.0
https://www.youtube.com/watch?v=Hmp2ctGacIo
https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices

// Nuget Packages for the Test Solution

- NUnit
- NUnit3TestAdapter
- Microsoft.NET.Test.Sdk
- Microsoft.AspNetCore.MVC.Testing
- Moq
- Moq.EntityFrameworkCore
- Moq.Contrib.HttpClient


// Program.cs file

- Add following code at end of Program.cs file:-  public partial class Program { }


// Samples:
Assert.That(_departments.Any(d => d.Dept_id == 1));
Assert.That(_departments.Any(d => d.Dept_name == "Paralegal"));


===========================================================================================================================================================================


   + //Multiple Row List Collection

   var departments = new List<Departments>
        {
        { new Departments() { Dept_id = 1, Dept_name = "Paralegal"}},
        { new Departments() { Dept_id = 2, Dept_name = "Business"}},
        { new Departments() { Dept_id = 3, Dept_name = "Public Relations"}},
        { new Departments() { Dept_id = 4, Dept_name = "Customer Support"}}
        };


   + //Single Row List Collection

   var _deptData = new Departments() { Dept_id = 1, Dept_name = "Paralegal" };



===========================================================================================================================================================================


// Git Version Control & CI/CD Pipeline

Enusre you are in your working dev branch
make changes to your working dev branch
Stage your changes
Commit your changes
Merge committed changes to main branch
Publish your Main


// Other Terminologies:

Push and Pull
Pull Requests
New Branches
Cloning Repositories
Code Review
Branch History
Compare with Unmodified
Merge Branches
Checkout
Fetch
Compare with unmodified


===========================================================================================================================================================================


LAZY LOADING:


// MSDN Reference:  https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.proxiesservicecollectionextensions.addentityframeworkproxies?view=efcore-7.0#microsoft-extensions-dependencyinjection-proxiesservicecollectionextensions-addentityframeworkproxies(microsoft-extensions-dependencyinjection-iservicecollection)
                    https://learn.microsoft.com/en-us/ef/core/querying/related-data/lazy


// Nuget Packages:

Downlaod the following package:- Microsoft.EntityFrameworkCore.Proxies (V.7.0.4)
                                 Microsoft.AspNetCore.Mvc.NewtonsoftJson


// Program.cs file

* Add Lazy Loading and NewtonsoftJson to Entity Framework core & SQL Server Configuration like below in Program.cs:-

// Add Newftonsoftjson to the container.
builder.Services.AddControllersWithViews()
 .AddNewtonsoftJson(options =>
    options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
);


// Add EF & Lazy Load to the container.
builder.Services.AddDbContext<ApplicationDBContext>(options => options.UseLazyLoadingProxies().UseSqlServer(
    builder.Configuration.GetConnectionString("DefaultConnection"), providerOptions => providerOptions.EnableRetryOnFailure()));


// Sample: Employee.cs

        [ForeignKey("Job_id")]
        public virtual Jobs? Job { get; set; }

        [ForeignKey("Address_id")]
        public virtual Address? Address { get; set; }

        [ForeignKey("Manager_id")]
        public virtual Managers? Manager { get; set; }

        [ForeignKey("Dept_id")]
        public virtual Departments? Department { get; set; } 

        [ForeignKey("Loc_id")]
        public virtual Worklocation? Worklocation { get; set; }


// Repository.cs : - Uncomment AsNoTraccking Logic!

   NOTE: Lazy loading is not supported for detached entities or entities that are loaded with 'AsNoTracking'.
   MEANING: Example, don't use .AsNoTracking in Repository call to the DBSet holding Lazy Load (Employee.cs)


===========================================================================================================================================================================


